from dto.music import (
    MusicFileStats,
    Track,
    Artist,
    Album,
    NewAlbum,
    NewArtist,
    NewTrack,
)

from typing import AsyncIterator, Protocol


class IMusicFileRepository(Protocol):
    async def save_music(
        self, object_name: str, file_data: bytes, content_type: str
    ) -> None: ...

    async def save_image(
        self, object_name: str, file_data: bytes, content_type: str
    ) -> None: ...

    async def stream_music(
        self, music_name: str, start: int, end: int
    ) -> AsyncIterator[bytes]: ...

    async def get_music_stats(self, music_name: str) -> MusicFileStats: ...
    async def get_image(self, image_name: str) -> bytes: ...
    async def delete_file(self, object_name: str) -> None: ...


class IMusicMetadataRepository(Protocol):
    # Artist methods
    async def create_artist(self, new_artist: NewArtist) -> Artist: ...
    async def get_artist_by_id(self, artist_id: int) -> Artist: ...
    async def get_all_artists(
        self, skip: int = 0, limit: int = 100
    ) -> list[Artist]: ...
    async def update_artist(self, artist_id: int, new_data: NewArtist) -> Artist: ...
    async def delete_artist(self, artist_id: int) -> None: ...

    # Album methods
    async def create_album(self, new_album: NewAlbum) -> Album: ...
    async def get_album_by_id(self, album_id: int) -> Album: ...
    async def get_albums_by_artist(
        self, artist_id: int, skip: int = 0, limit: int = 100
    ) -> list[Album]: ...
    async def update_album(self, album_id: int, new_data: NewAlbum) -> Album: ...
    async def delete_album(self, album_id: int) -> None: ...

    # Track methods
    async def create_track(self, new_track: NewTrack) -> Track: ...
    async def get_track_by_id(self, track_id: int) -> Track: ...
    async def get_tracks_by_album(
        self, album_id: int, skip: int = 0, limit: int = 100
    ) -> list[Track]: ...
    async def get_tracks_by_artist(
        self, artist_id: int, skip: int = 0, limit: int = 100
    ) -> list[Track]: ...
    async def get_tracks(self, skip: int = 0, limit: int = 100) -> list[Track]: ...
    async def update_track(self, track_id: int, new_data: NewTrack) -> Track: ...
    async def delete_track(self, track_id: int) -> None: ...
